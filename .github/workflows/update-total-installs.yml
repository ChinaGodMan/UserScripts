name: 更新总安装量

on:
  schedule:
    - cron: '0 * * * *'  # 每 60 分钟运行一次

  workflow_dispatch:  # 允许手动触发工作流

  # push:
  #  branches:
  #    - main  # 只有当代码推送到 `main` 分支时才触发工作流

jobs:
  update-total-installs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: 检出代码
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}  # 使用你创建的 Token

      - name: 获取当前分支
        id: get_branch
        run: |
          echo "当前分支: $(git rev-parse --abbrev-ref HEAD)"
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: 拉取最新更改
        run: |
          git pull origin ${{ env.branch }}  # 拉取最新的远程更改

      - name: 获取和处理 JSON 数据
        run: |
          # 下载 JSON 文件
          curl -s https://greasyfork.org/zh-CN/users/1169082-%E4%BA%BA%E6%B0%91%E7%9A%84%E5%8B%A4%E5%8A%A1%E5%91%98.json -o data.json

          # 打印下载的 JSON 文件内容进行调试
          echo "下载的 JSON 文件内容:"
          cat data.json

          # 处理 `all_listable_scripts` 和 `scripts` 中的统计数据
          if jq -e '.all_listable_scripts' data.json > /dev/null; then
              echo "当前数据来源是 all_listable_scripts"
              # 处理 `all_listable_scripts` 中的统计数据
              total_installs=$(jq '[.all_listable_scripts[]? | select(.total_installs != null) | .total_installs] | add' data.json)
              num_scripts=$(jq '.all_listable_scripts | length' data.json)
              total_good_ratings=$(jq '[.all_listable_scripts[]? | select(.good_ratings != null) | .good_ratings] | add' data.json)
              total_ok_ratings=$(jq '[.all_listable_scripts[]? | select(.ok_ratings != null) | .ok_ratings] | add' data.json)
              total_bad_ratings=$(jq '[.all_listable_scripts[]? | select(.bad_ratings != null) | .bad_ratings] | add' data.json)
              total_daily_installs=$(jq '[.all_listable_scripts[]? | select(.daily_installs != null) | .daily_installs] | add' data.json)
          elif jq -e '.scripts' data.json > /dev/null; then
              echo "当前数据来源是 scripts"
              # 处理 `scripts` 中的统计数据
              total_installs=$(jq '[.scripts[]? | select(.total_installs != null) | .total_installs] | add' data.json)
              num_scripts=$(jq '.scripts | length' data.json)
              total_good_ratings=$(jq '[.scripts[]? | select(.good_ratings != null) | .good_ratings] | add' data.json)
              total_ok_ratings=$(jq '[.scripts[]? | select(.ok_ratings != null) | .ok_ratings] | add' data.json)
              total_bad_ratings=$(jq '[.scripts[]? | select(.bad_ratings != null) | .bad_ratings] | add' data.json)
              total_daily_installs=$(jq '[.scripts[]? | select(.daily_installs != null) | .daily_installs] | add' data.json)
          else
              echo "未找到数据源"
              exit 1
          fi

          # 检查是否有计算结果为空
          total_installs=${total_installs:-0}
          num_scripts=${num_scripts:-0}
          total_good_ratings=${total_good_ratings:-0}
          total_ok_ratings=${total_ok_ratings:-0}
          total_bad_ratings=${total_bad_ratings:-0}
          total_daily_installs=${total_daily_installs:-0}

          # 将数据写入 JSON 文件
          echo "{
            \"totalInstalls\": $total_installs,
            \"numScripts\": $num_scripts,
            \"totalGoodRatings\": $total_good_ratings,
            \"totalOkRatings\": $total_ok_ratings,
            \"totalBadRatings\": $total_bad_ratings,
            \"totalDailyInstalls\": $total_daily_installs
          }" > docs/total_installs.json

          # 打印生成的 JSON 文件内容进行调试
          echo "生成的 JSON 文件内容:"
          cat docs/total_installs.json

          # 清理工作区中的临时文件
          rm data.json

      - name: 提交和推送更改
        run: |
          # 配置 Git 用户
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 添加更改
          git add docs/total_installs.json
          git commit -m '更新 Greasyfork 最新统计数据' || echo "没有需要提交的更改"
          git push origin ${{ env.branch }}
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}  # 传递 Token 到 Git 环境变量中

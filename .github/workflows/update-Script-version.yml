name: 更新用户脚本版本

on:
  schedule:
    - cron: '0 0 * * *'  # 每天的 UTC 时间 0 点，即中国时间的早上 8 点
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  update-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: 检出代码
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}  # 使用你创建的 Token

      - name: 获取当前分支
        id: get_branch
        run: |
          echo "当前分支: $(git rev-parse --abbrev-ref HEAD)"
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: 拉取最新更改
        run: |
          git pull origin ${{ env.branch }}  # 拉取最新的远程更改

      - name: 调试 JSON 文件
        run: |
          echo "当前脚本路径列表:"
          cat docs/ScriptsPath.json  # 打印 JSON 文件内容以进行调试

      - name: 提取当前版本
        id: extract_version
        run: |
          jq -c '.scripts[] | select(.isUpdated == true) | .path' docs/ScriptsPath.json | while IFS= read -r file; do
            file=$(echo "$file" | tr -d '"')  # 去除 JSON 中的双引号
            echo "处理文件: \"$file\""
            if [ -f "$file" ]; then
              current_version=$(awk '/^\/\/ @version/ {print $NF}' "$file")
              echo "文件 $file 的当前版本: $current_version"
              
              if [ -z "$current_version" ]; then
                echo "在脚本文件 $file 中未找到版本号"
                exit 1
              fi
              
              version_number=$(echo "$current_version" | sed 's/\./ /g')
              echo "版本号（转换为数字）: $version_number"
              
              version_number=$(echo $version_number | awk '{printf "%d", ($1*1000000 + $2*10000 + $3*100 + $4 + 1)}')
              echo "版本号（加1后的数字）: $version_number"
              
              major=$((version_number / 1000000))
              minor=$(( (version_number % 1000000) / 10000 ))
              patch=$(( (version_number % 10000) / 100 ))
              build=$(( version_number % 100 ))
              
              new_version="$major.$minor.$patch.$build"
              echo "文件 $file 的新版本号: $new_version"
              
              sed -i "s|// @version[ ]\+[0-9]*\([.][0-9]*\)*|// @version $new_version|" "$file"
              
              echo "${file}_NEW_VERSION=$new_version" >> $GITHUB_ENV
              
              # 读取 backuppath 并复制文件
              backup_path=$(jq -r --arg file "$file" '.scripts[] | select(.path == $file) | .backuppath' docs/ScriptsPath.json)
              if [ -n "$backup_path" ]; then
                echo "备份路径: $backup_path"
                mkdir -p "$backup_path"  # 创建备份目录
                cp -f "$file" "$backup_path"  # 强制覆盖文件
                echo "文件 $file 备份到 $backup_path"
              else
                echo "未为文件 $file 指定备份路径"
              fi
            else
              echo "未找到脚本文件: $file"
              exit 1
            fi
          done

      - name: 检查 @version 是否已更新
        run: |
          jq -c '.scripts[] | select(.isUpdated == true) | .path' docs/ScriptsPath.json | while IFS= read -r file; do
            file=$(echo "$file" | tr -d '"')
            echo "检查文件中的版本号: $file"
            grep '^// @version' "$file"
          done

      - name: 获取更改的文件列表并提交
        id: changed-files
        run: |
          # 获取更改的文件列表
          git status --porcelain | awk '{print $2}' > changed_files.txt
          
          commit_message="Your commit message"
          while IFS= read -r file
          do
            file=$(echo "$file" | sed 's/^"//;s/"$//')  # 去除可能存在的引号
            if [[ $file == *.user.js ]]; then
              echo "Adding and committing $file with message '$commit_message'"
              git add "$file"
              git commit -m "$commit_message" || echo "没有需要提交的更改"
            else
              echo "Adding and committing $file with message '更新'"
              git add "$file"
              git commit -m "更新" || echo "没有需要提交的更改"
            fi
          done < changed_files.txt

      - name: 推送更改
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git push origin ${{ env.branch }}  # 推送到当前分支
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}  # 传递 Token 到 Git 环境变量中
